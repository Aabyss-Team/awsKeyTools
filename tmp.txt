class TestCommand(Command):
    def run(self, line):
        # 查看角色
        # client = boto3.client('iam')
        # response = client.get_role(
        #     RoleName='ssm'
        # )
        # print(response)
        # print(
        #     11111111111
        # )
        # 查看角色的策略名
        # response1 = client.list_attached_role_policies(
        #     RoleName='ssm',
        #     PathPrefix='/',
        #     MaxItems=123
        # )
        #
        # print(response1)
        # 查看策略的json 内敛
        # response3 = client.get_role_policy(
        #     RoleName='ssm',
        #     PolicyName='AmazonSSMManagedInstanceCore'
        # )
        # print(response3)

        # 托管
        # iam = boto3.resource('iam')
        # policy = iam.Policy('arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore')
        # print(
        #     policy.default_version_id
        # )
        # policy_version = iam.PolicyVersion('arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore', policy.default_version_id)
        # print(json.dumps(policy_version.document,indent=2))

        # 创建角色
        # with open("ec2-role-trust-policy.json",mode="r",encoding="utf-8") as f:
        #     json1 = f.read()
        # response = client.create_role(
        #     Path='/',
        #     RoleName='ssm2',
        #     AssumeRolePolicyDocument=json1,
        #     # AssumeRolePolicyDocument="{'Version': '2012-10-17', 'Statement': [{'Effect': 'Allow', 'Principal': {'Service': 'ec2.amazonaws.com'}, 'Action': 'sts:AssumeRole'}]}",
        #     Description='Allows EC2 instances to call AWS services on your behalf.',
        # )
        # #
        # print(
        #     response
        # )
        # print(
        #     1111111111111
        # )
        # 给角色添加策略
        # with open("AmazonSSMManagedInstanceCore.json", mode="r", encoding="utf-8") as f:
        #     json2 = f.read()
        # response2 = client.put_role_policy(
        #     RoleName='ssm2',
        #     PolicyName='AmazonSSMManagedInstanceCoreMe',
        #     PolicyDocument=json2
        # )
        # print(response2)
        #
        # print(123411111111)
        # 查看内敛策略的json
        # response1 = client.get_role_policy(
        #     RoleName='ssm2',
        #     PolicyName='AmazonSSMManagedInstanceCoreMe'
        # )
        # print(response1)

        # response1 = client.list_attached_role_policies(
        #     RoleName='ssm2',
        #     PathPrefix='/',
        #     MaxItems=123
        # )
        #
        # print(response1)
        # profile_name = 'xioaming'
        # response = client.get_instance_profile(
        #     InstanceProfileName=profile_name)
        # print(response)
        # 创建实力配置文件
        # response3 = client.create_instance_profile(
        #     InstanceProfileName="ssm2_profile")
        # print(response3)
        # Arn = response3.get("InstanceProfile").get("Arn")
        # print(Arn)
        # # 添加角色到实力配置文件
        # response4 = client.add_role_to_instance_profile(
        #     InstanceProfileName="ssm2_profile", RoleName='ssm2')
        # print(response4)
        # 添加角色到ec2
        # iam——》ec2
        # client = boto3.client('ec2', region_name="us-west-1")
        # response = client.associate_iam_instance_profile(
        #     IamInstanceProfile={
        #         'Arn': "arn:aws:iam::455720863430:instance-profile/ssm2_profile",
        #         'Name': "ssm2_profile",
        #     },
        #     InstanceId='i-08b14f120c367285d')
        # print(response)

        #  i-08b14f120c367285d
        #  i-084e7c34596d7f0cb

        # 现在的问题是IAM角色附加ec2 有问题，尝试解决办法是通过policy创建一个角色，然后附加到实力配置文件上，然后把角色-》ec2

        # 删除一条龙
        # 从ec2上分离IAM
        # client_ec2 = boto3.client('ec2',region_name="us-west-1")
        # response = client_ec2.disassociate_iam_instance_profile(
        #     AssociationId='iip-assoc-007bc2ab2cace57cf'
        # )
        # iip-assoc-0336339cf402cbed9  linux
        # iip-assoc-02211ba69251b3b1d windows
        # print(response)
        # 删除策略
        client = boto3.client('iam')
        # response = client.delete_policy(
        #     PolicyArn='arn:aws:iam::455720863430:policy/ssm_policy'
        # )
        # print(response)

        # 从配置文件中删除角色
        # response = client.remove_role_from_instance_profile(
        #     InstanceProfileName='SSMFullAccessProfile',
        #     RoleName='AmazonSSMManagedInstance'
        # )
        # print(response)

        # 删除角色
        # response = client.delete_role(
        #     RoleName='AmazonSSMManagedInstance'
        # )

        # # 删除实例配置文件
        response = client.delete_instance_profile(InstanceProfileName='ssm_profile')
        print(response)

        # # 查看实力配置文件
        response1 = client.list_instance_profiles(PathPrefix='/')
        lst = response1.get("InstanceProfiles")
        for i in lst:
            print(i.get('InstanceProfileName'))
        print(response1)